{
  "address": "0x02D864267626491801Cd999D9657E54e24952f8B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "voters",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expirationTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "_cand",
          "type": "string[]"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ProposalID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_tokens",
          "type": "uint256[]"
        }
      ],
      "name": "VoteCasted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mintAndburn",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintAndburn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allVoters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "hasVoted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "voteNum",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "burn",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        }
      ],
      "name": "burnOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_disc",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_option",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_voteRight",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "optionById",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "disc",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "numOfOptions",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "voteRight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "winnerCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_hash",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "v",
          "type": "uint256[]"
        }
      ],
      "name": "responseProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "resultOf",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "resultOfProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "resultOfProposalbyId",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userProposal",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "proposalCount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "responseCount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "votersById",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "votesArrayById",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "winCountLen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5555e6930152ffde2a40bce7f97a41c133014ba1408cc1a05beeaff47e25d2c",
  "receipt": {
    "to": null,
    "from": "0xffd3452eFa0eda06F8F1F7e2442C3E075905AE3e",
    "contractAddress": "0x02D864267626491801Cd999D9657E54e24952f8B",
    "transactionIndex": 45,
    "gasUsed": "4466611",
    "logsBloom": "0x
    "blockHash": "0x2bd7446f77d788c5de34bb9f13494a091a0d4237e5d5a9f325b92d96ce65a58e",
    "transactionHash": "0xd5555e6930152ffde2a40bce7f97a41c133014ba1408cc1a05beeaff47e25d2c",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 27744249,
        "transactionHash": "0xd5555e6930152ffde2a40bce7f97a41c133014ba1408cc1a05beeaff47e25d2c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ffd3452efa0eda06f8f1f7e2442c3e075905ae3e",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001eb5dcc053888bf0000000000000000000000000000000000000000000000000aad79bbe47aa6d1000000000000000000000000000000000000000000002416ee50d32f4bc5122600000000000000000000000000000000000000000000000008c21befdf421e12000000000000000000000000000000000000000000002416f03c30fb50fd9ae5",
        "logIndex": 116,
        "blockHash": "0x2bd7446f77d788c5de34bb9f13494a091a0d4237e5d5a9f325b92d96ce65a58e"
      }
    ],
    "blockNumber": 27744249,
    "cumulativeGasUsed": "9272093",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9835410ccb8fc64d4afbacedd9961e66",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_cand\",\"type\":\"string[]\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ProposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"VoteCasted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mintAndburn\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintAndburn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voteNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"}],\"name\":\"burnOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_disc\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_option\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_voteRight\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"optionById\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"disc\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"numOfOptions\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"voteRight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_hash\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"v\",\"type\":\"uint256[]\"}],\"name\":\"responseProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"resultOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"resultOfProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"resultOfProposalbyId\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userProposal\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"proposalCount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"responseCount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"votersById\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"votesArrayById\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"winCountLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Qvoting.sol\":\"Qvoting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"EventsQv/ProposalEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface proposalEvents{\\r\\n    event VoteCasted(address voter, uint256 ProposalID, uint256[] _tokens);\\r\\n// _voters,_creator,_startTime,_expirationTime,_disc,_cand\\r\\n    event ProposalCreated(\\r\\n        uint proposalId,\\r\\n        address[] voters,\\r\\n        address creator,\\r\\n        uint256 startTime,\\r\\n        uint256 expirationTime,\\r\\n        string description,\\r\\n        string[] _cand\\r\\n    );\\r\\n}\",\"keccak256\":\"0x072aa8be619d311f650bbdcc455651a33bcea231d808fce558be660867979cd0\",\"license\":\"MIT\"},\"Library/ProposalLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"VoterLibrary.sol\\\";\\r\\n\\r\\nlibrary proposalLibrary {\\r\\n    struct proposal {\\r\\n        // uint256 proposalId;\\r\\n        address creator;\\r\\n        uint8 status;\\r\\n        string disc;\\r\\n        // address[] voters;\\r\\n        uint256 startTime;\\r\\n        uint256 expirationTime;\\r\\n        uint16 numOfOptions;\\r\\n        uint256 voteRight;\\r\\n        mapping(address => bool) voters;\\r\\n        uint256 winnerCount;\\r\\n        // mapping(address => voter) voterInfo;\\r\\n\\r\\n        // option -> option || replace\\r\\n        // create proposal props\\r\\n        mapping(string => bool) option;\\r\\n        mapping(uint256 => string) optionHash;\\r\\n        // respose proposal props\\r\\n        mapping(uint256 => string) result;\\r\\n        mapping(string => uint256) votes;\\r\\n    }\\r\\n\\r\\n    // create proposal\\r\\n    function createProposal(\\r\\n        proposal storage self,\\r\\n        uint8 _status,\\r\\n        address[] memory _voters,\\r\\n        address _creator,\\r\\n        uint256 _startTime,\\r\\n        uint256 _expirationTime,\\r\\n        string memory _disc,\\r\\n        uint256 _voteRight,\\r\\n        string[] calldata _option\\r\\n    ) internal returns (bool) {\\r\\n        self.creator = _creator;\\r\\n        self.status = _status;\\r\\n        self.disc = _disc;\\r\\n        self.startTime = _startTime;\\r\\n        self.expirationTime = _expirationTime;\\r\\n        self.numOfOptions = uint16(_option.length);\\r\\n        self.voteRight = _voteRight;\\r\\n        for (uint256 i = 0; i < _option.length; i++) {\\r\\n            self.option[_option[i]] = true;\\r\\n            self.optionHash[i + 1] = _option[i];\\r\\n        }\\r\\n        for (uint256 i = 0; i < _voters.length; i++) {\\r\\n            self.voters[_voters[i]] = true;\\r\\n        }\\r\\n        self.winnerCount = 3;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // take response\\r\\n    function responseProposal(\\r\\n        proposal storage self,\\r\\n        address _voter,\\r\\n        string[] memory _hash,\\r\\n        uint256[] memory v\\r\\n    ) internal returns (bool) {\\r\\n        require(self.status == 2, \\\"Proposal: inactive\\\");\\r\\n        require(block.timestamp <= self.startTime, \\\"proposal not started yet\\\");\\r\\n        if (block.timestamp > self.expirationTime) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        // if active\\r\\n        require(self.voters[_voter], \\\"Not a valid voter for this proposal\\\");\\r\\n        for (uint16 i = 0; i < self.numOfOptions; i++) {\\r\\n            require(self.option[_hash[i]], \\\"Proposal: invalid optionHash\\\");\\r\\n            self.votes[_hash[i]] += v[i];\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function proposalresult(proposal storage self) internal returns (bool) {\\r\\n        require(\\r\\n            block.timestamp > self.expirationTime,\\r\\n            \\\"Proposal hasn't ended yet!\\\"\\r\\n        );\\r\\n        // answer || result aayega\\r\\n        self.status = 3;\\r\\n        uint256 largestCount = self.votes[self.optionHash[1]];\\r\\n        uint256 _winnerCount = 1;\\r\\n        self.result[1] = self.optionHash[1];\\r\\n        // this for loop is used to find the winner count\\r\\n        for (uint16 i = 2; i <= self.numOfOptions; i++) {\\r\\n            if (self.votes[self.optionHash[i]] > largestCount) {\\r\\n                largestCount = self.votes[self.optionHash[i]];\\r\\n                _winnerCount = 1;\\r\\n                self.result[1] = self.optionHash[i];\\r\\n            } else if (self.votes[self.optionHash[i]] == largestCount) {\\r\\n                _winnerCount++;\\r\\n                self.result[_winnerCount] = self.optionHash[i];\\r\\n            }\\r\\n        }\\r\\n        self.winnerCount = _winnerCount;\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb09597ff549f0b338b0cb07ca54226aaaf7e70ee571b2e3eb63e76f5d734d3ff\",\"license\":\"MIT\"},\"Library/UserProposalLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary UserProposalLibrary{\\r\\n    struct UserProposal{\\r\\n    \\r\\n    // createCount\\r\\n    uint128 proposalCount;\\r\\n\\r\\n    // resposeCount\\r\\n    uint128 responseCount;\\r\\n\\r\\n     // poll creation property\\r\\n    mapping(uint128 => uint) proposalCreated; \\r\\n    \\r\\n    // poll response property\\r\\n    mapping(uint128 => uint) proposalResponsed; // response kis pollId par aaya hain\\r\\n    mapping(uint => mapping(uint => string)) proposalAnswer; //pollId => answerHash  \\r\\n    mapping(uint => bool) responsedProposal; \\r\\n\\r\\n    }\\r\\n    function updateProposalList(UserProposal storage self, uint _proposalId) internal returns(bool){\\r\\n        self.proposalCount++;\\r\\n        self.proposalCreated[self.proposalCount] = _proposalId;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateResponseList(UserProposal storage self, uint _proposalId, string[] memory _hash) internal returns(bool){\\r\\n        self.responseCount++;  \\r\\n        self.proposalResponsed[self.responseCount] = _proposalId;\\r\\n        // uint len =_hash.length();\\r\\n        // for(uint i=0;i<len;i++){\\r\\n        //     self.proposalAnswer[_proposalId][i+1] = _hash[i];\\r\\n        // }\\r\\n        for(uint16 i=0;i<_hash.length;i++){\\r\\n            self.proposalAnswer[_proposalId][i+1] = _hash[i];\\r\\n        }\\r\\n        self.responsedProposal[_proposalId] = true;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xcf09a3a8052c837dd8e89422ebcacd4a1ed428f270b568ed239e3df0121ff090\",\"license\":\"MIT\"},\"Library/VoterLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary voterLibrary {\\r\\n    struct voter {\\r\\n        uint256 proposalId;\\r\\n        address voterAddress;\\r\\n        bool hasVoted;\\r\\n        uint256 voteNum;\\r\\n        bool burn;\\r\\n    }\\r\\n\\r\\n    // hasVoted - direct check by self.hasVoted\\r\\n    // function hasVoted(voter storage self) internal returns(bool){\\r\\n    //   require(self.proposalId!=0,\\\"Invalid voter!\\\");\\r\\n    //   return self.hasVoted;\\r\\n    // }\\r\\n    // hasEnoughToken - direct use karega\\r\\n    // function hasEnoughToken(voter storage self, uint256 _voteCast) internal returns(bool){\\r\\n    //   require(self.proposalId!=0,\\\"Invalid voter!\\\");\\r\\n    //   require(!self.hasVoted, \\\"already voted\\\");\\r\\n    //   require(self.voteNum >=_voteCast, \\\"not have enough token\\\");\\r\\n    //   return true;\\r\\n    // }\\r\\n    // updatevoteNum after vote_Cast\\r\\n    function updateVoteNum(voter storage self) internal returns (bool) {\\r\\n        require(self.proposalId != 0, \\\"Invalid voter for proposalId!\\\");\\r\\n        require(!self.hasVoted, \\\"not voted\\\");\\r\\n        self.voteNum = 0;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // createVoter\\r\\n    function createVoter(\\r\\n        voter storage self,\\r\\n        uint256 _proposalId,\\r\\n        address _voterAddress,\\r\\n        bool _hasVoted,\\r\\n        uint256 _voteNum\\r\\n    ) internal returns (bool) {\\r\\n        self.proposalId = _proposalId;\\r\\n        self.voterAddress = _voterAddress;\\r\\n        self.hasVoted = _hasVoted;\\r\\n        self.voteNum = _voteNum;\\r\\n        self.burn = false;\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb469ffbd6304934c38d5d05eb20be0b3049d2ffa3dbdf2386030e1e56e32b22a\",\"license\":\"MIT\"},\"QvToken/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\"},\"QvToken/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\n \\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        // _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit mintAndburn(\\\"mint\\\",account, amount);\\r\\n\\r\\n        // _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n    \\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        // _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit mintAndburn(\\\"burn\\\",account, amount);\\r\\n\\r\\n        // _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    // function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n    //     address owner = _msgSender();\\r\\n    //     _transfer(owner, to, amount);\\r\\n    //     return true;\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n    //  */\\r\\n    // function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n    //     return _allowances[owner][spender];\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    // function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n    //     address owner = _msgSender();\\r\\n    //     _approve(owner, spender, amount);\\r\\n    //     return true;\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    // function transferFrom(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 amount\\r\\n    // ) public virtual override returns (bool) {\\r\\n    //     address spender = _msgSender();\\r\\n    //     _spendAllowance(from, spender, amount);\\r\\n    //     _transfer(from, to, amount);\\r\\n    //     return true;\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    // function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n    //     address owner = _msgSender();\\r\\n    //     _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n    //     return true;\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    // function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n    //     address owner = _msgSender();\\r\\n    //     uint256 currentAllowance = allowance(owner, spender);\\r\\n    //     require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n    //     unchecked {\\r\\n    //         _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n    //     }\\r\\n\\r\\n    //     return true;\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    // function _transfer(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 amount\\r\\n    // ) internal virtual {\\r\\n    //     require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n    //     require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n    //     _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n    //     uint256 fromBalance = _balances[from];\\r\\n    //     require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n    //     unchecked {\\r\\n    //         _balances[from] = fromBalance - amount;\\r\\n    //     }\\r\\n    //     _balances[to] += amount;\\r\\n\\r\\n    //     emit Transfer(from, to, amount);\\r\\n\\r\\n    //     _afterTokenTransfer(from, to, amount);\\r\\n    // }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    // function _mint(address account, uint256 amount) internal virtual {\\r\\n    //     require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n    //     // _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n    //     _totalSupply += amount;\\r\\n    //     _balances[account] += amount;\\r\\n    //     emit mintAndburn(\\\"mint\\\",account, amount);\\r\\n\\r\\n    //     // _afterTokenTransfer(address(0), account, amount);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n\\r\\n     \\r\\n    // function _burn(address account, uint256 amount) internal virtual {\\r\\n    //     require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n    //     // _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n    //     uint256 accountBalance = _balances[account];\\r\\n    //     require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n    //     unchecked {\\r\\n    //         _balances[account] = accountBalance - amount;\\r\\n    //     }\\r\\n    //     _totalSupply -= amount;\\r\\n\\r\\n    //     emit mintAndburn(\\\"burn\\\",account, amount);\\r\\n\\r\\n    //     // _afterTokenTransfer(account, address(0), amount);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    // function _approve(\\r\\n    //     address owner,\\r\\n    //     address spender,\\r\\n    //     uint256 amount\\r\\n    // ) internal virtual {\\r\\n    //     require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n    //     require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n    //     _allowances[owner][spender] = amount;\\r\\n    //     emit Approval(owner, spender, amount);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n    //  */\\r\\n    // function _spendAllowance(\\r\\n    //     address owner,\\r\\n    //     address spender,\\r\\n    //     uint256 amount\\r\\n    // ) internal virtual {\\r\\n    //     uint256 currentAllowance = allowance(owner, spender);\\r\\n    //     if (currentAllowance != type(uint256).max) {\\r\\n    //         require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n    //         unchecked {\\r\\n    //             _approve(owner, spender, currentAllowance - amount);\\r\\n    //         }\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    // function _beforeTokenTransfer(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 amount\\r\\n    // ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    // function _afterTokenTransfer(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 amount\\r\\n    // ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x11d93dd306b9501a7253367f9bb8aa4e9065f6fdadc666b3b91262206f12aaaa\",\"license\":\"MIT\"},\"QvToken/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    // event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    // event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    event mintAndburn(string mintAndburn, address account, uint256 amount);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    // function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    // function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    // function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    // function transferFrom(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 amount\\r\\n    // ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x4922eeec54eeee3760eaf772af6d0925571e858c272cd95d3d73f64b2fde6c2d\",\"license\":\"MIT\"},\"QvToken/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x94dc88716e92464d240916e16167a8a900f88a2a954fb23cd2ac7f8f96d4d1b4\",\"license\":\"MIT\"},\"QvToken/QvToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\ncontract QVtoken is ERC20 {\\r\\n    address private owner;\\r\\n\\r\\n    constructor() ERC20(\\\"QVotingToken\\\", \\\"Qv\\\") {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner(address msgSender) {\\r\\n        require(owner == msgSender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function checkAdmin() public view returns (bool) {\\r\\n        if (msg.sender == owner) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 amount) internal onlyOwner(_msgSender()) {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    function burn(address to, uint256 amount) internal onlyOwner(_msgSender()) {\\r\\n        _burn(to, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6bb1fe139672d14d287aec0acfa9ca8d9bf98d497fd115b813e27f045521dbb4\",\"license\":\"MIT\"},\"contracts/Qvoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../EventsQv/ProposalEvents.sol\\\";\\r\\nimport \\\"../Library/VoterLibrary.sol\\\";\\r\\nimport \\\"../Library/ProposalLibrary.sol\\\";\\r\\nimport \\\"../Library/UserProposalLibrary.sol\\\";\\r\\nimport \\\"../QvToken/QvToken.sol\\\";\\r\\nimport \\\"../QvToken/ERC20.sol\\\";\\r\\nimport \\\"../QvToken/Context.sol\\\";\\r\\nimport \\\"../QvToken/IERC20.sol\\\";\\r\\nimport \\\"../QvToken/IERC20Metadata.sol\\\";\\r\\n\\r\\n// why Poll is inheriting from ReentrancyGuard, CustomOwnable, brainchainEvents ?\\r\\ncontract Qvoting is proposalEvents, QVtoken {\\r\\n    // what is the use of pollLibrary and UserPollLibrary : difference b/w them?\\r\\n    using proposalLibrary for proposalLibrary.proposal;\\r\\n    using UserProposalLibrary for UserProposalLibrary.UserProposal;\\r\\n    using voterLibrary for voterLibrary.voter;\\r\\n    //this is not understandable?? SafeERC20 ??\\r\\n    // using SafeERC20 for IERC20;  // how do you think ki lets use this here and what does safeERC20 signifies?\\r\\n\\r\\n    // Iadmin public admin;   // use of admin here !!  interface se instance ku bnaya .. new karke bhi toh bna sakte tha\\r\\n    // bool internal isInitialized;\\r\\n    uint256 private proposalId;\\r\\n    // address public root; // root signifies ??\\r\\n    mapping(address => UserProposalLibrary.UserProposal) public userProposal; //address => userPolls\\r\\n    mapping(uint256 => proposalLibrary.proposal) public proposals; //pollId => pool Detail object\\r\\n    mapping(address => mapping(uint256 => voterLibrary.voter)) public allVoters;\\r\\n    mapping(uint256 => bool) validProposals;\\r\\n\\r\\n    // proposals[_proposalId].creator;\\r\\n\\r\\n    // mapping(uint => bool) public poll_NFT;\\r\\n\\r\\n    // ye tha is function mai 3rd argument : address _user\\r\\n    // function initialize(address _root, address _admin) public {\\r\\n    //     require(!isInitialized,\\\"initialized\\\");\\r\\n    //     isInitialized = true;\\r\\n    //     _setOwner(_root);\\r\\n    //     root = _root;\\r\\n    //     admin = Iadmin(_admin);\\r\\n    // }\\r\\n\\r\\n    // _badgeID,and _token ??\\r\\n    // why does it have only 1 ques ??\\r\\n\\r\\n    function createProposal(\\r\\n        uint8 _status,\\r\\n        address[] memory _voters,\\r\\n        address _creator,\\r\\n        uint256 _startTime,\\r\\n        uint256 _expirationTime,\\r\\n        string memory _disc,\\r\\n        string[] calldata _option,\\r\\n        uint256 _voteRight\\r\\n    ) external {\\r\\n        // start time and end time should be greater than current time ye hona chahiye but what does mean by \\\"pool not started\\\"?\\r\\n        require(block.timestamp < _startTime, \\\"proposal not started\\\");\\r\\n        require(\\r\\n            block.timestamp < _expirationTime,\\r\\n            \\\"End time should be greater than current time\\\"\\r\\n        );\\r\\n        require(\\r\\n            _startTime < _expirationTime,\\r\\n            \\\"End time should be greater than start time\\\"\\r\\n        );\\r\\n        proposalId++;\\r\\n        proposals[proposalId].createProposal(\\r\\n            _status,\\r\\n            _voters,\\r\\n            _creator,\\r\\n            _startTime,\\r\\n            _expirationTime,\\r\\n            _disc,\\r\\n            _voteRight,\\r\\n            _option\\r\\n        );\\r\\n        emit ProposalCreated(\\r\\n            proposalId,\\r\\n            _voters,\\r\\n            _creator,\\r\\n            _startTime,\\r\\n            _expirationTime,\\r\\n            _disc,\\r\\n            _option\\r\\n        );\\r\\n        validProposals[proposalId] = true;\\r\\n        // 1 -> a=1 b=1 c=1 d=1\\r\\n        // 10 -> a=10 b=10 c=10 d=10\\r\\n\\r\\n        for (uint256 i = 0; i < _voters.length; i++) {\\r\\n            mint(_voters[i], _voteRight);\\r\\n            allVoters[_voters[i]][proposalId].createVoter(\\r\\n                proposalId,\\r\\n                _voters[i],\\r\\n                false,\\r\\n                _voteRight\\r\\n            );\\r\\n            emit mintAndburn(\\\"mint\\\", _voters[i], _voteRight);\\r\\n        }\\r\\n\\r\\n        userProposal[_msgSender()].updateProposalList(proposalId);\\r\\n    }\\r\\n\\r\\n    function getProposalCount() public view returns (uint256) {\\r\\n        return proposalId;\\r\\n    }\\r\\n\\r\\n    function responseProposal(\\r\\n        uint256 _proposalId,\\r\\n        address _voter,\\r\\n        string[] memory _hash,\\r\\n        uint256[] memory v\\r\\n    ) external {\\r\\n        // require(Iuser(admin.userContract()).isUserExist(_msgSender()),\\\"User not exist\\\");\\r\\n\\r\\n        require(validProposals[_proposalId], \\\"invalid proposalId\\\");\\r\\n        require(\\r\\n            allVoters[_voter][_proposalId].proposalId == _proposalId,\\r\\n            \\\"not a valid voter for this proposal\\\"\\r\\n        );\\r\\n\\r\\n        // ye chaya proposal voter[]!! // access\\r\\n        require(!allVoters[_voter][_proposalId].hasVoted, \\\"already voted\\\");\\r\\n        require(\\r\\n            proposals[_proposalId].numOfOptions == _hash.length,\\r\\n            \\\"not a valid length of hash response!\\\"\\r\\n        );\\r\\n        uint256 sum = 0;\\r\\n        for (uint256 i = 0; i < v.length; i++) {\\r\\n            sum += v[i] * v[i];\\r\\n        }\\r\\n        require(\\r\\n            allVoters[_voter][_proposalId].voteNum >= sum,\\r\\n            \\\"not sufficient balance to cast vote\\\"\\r\\n        );\\r\\n\\r\\n        proposals[_proposalId].responseProposal(_voter, _hash, v);\\r\\n        userProposal[_msgSender()].updateResponseList(_proposalId, _hash);\\r\\n\\r\\n        allVoters[_voter][_proposalId].updateVoteNum();\\r\\n        allVoters[_voter][_proposalId].hasVoted = true;\\r\\n        // burn(_voter,proposals[proposalId].voteRight);\\r\\n        // emit mintAndburn(\\\"burn\\\", _voter, proposals[proposalId].voteRight);\\r\\n    }\\r\\n\\r\\n    // mint corresponding to proposal Id\\r\\n    // burn corresponding to proposal Id\\r\\n\\r\\n    function resultOfProposal(uint256 _proposalId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256, string memory)\\r\\n    {\\r\\n        require(validProposals[_proposalId], \\\"not a valid proposal\\\");\\r\\n        // require(proposals[proposalId].status ==3,\\\"not completed yet\\\");\\r\\n        return (\\r\\n            proposals[_proposalId].votes[proposals[_proposalId].result[1]],\\r\\n            proposals[_proposalId].result[1]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // function mintOwner(uint _proposalId, address[] memory _voters) external returns(bool)\\r\\n    // {\\r\\n    //     require(validProposals[_proposalId],\\\"Proposal do not exist\\\");\\r\\n    //     // require(_voteRight >0, \\\"credits should be greater than zero\\\");\\r\\n    //     uint _voteRight = proposals[_proposalId].voteRight;\\r\\n    //     for(uint256 i=0;i<_voters.length;i++){\\r\\n    //         mint(_voters[i],_voteRight);\\r\\n    //         allVoters[_voters[i]][proposalId].createVoter(proposalId, _voters[i], false, _voteRight);\\r\\n    //         emit mintAndburn(\\\"mint\\\",_voters[i],_voteRight);\\r\\n    //         }\\r\\n    //     return true;\\r\\n    // }\\r\\n\\r\\n    function burnOwner(uint256 _proposalId, address[] memory _voters)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            block.timestamp > (proposals[_proposalId].expirationTime / 1000),\\r\\n            \\\"proposal is not completed yet\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _voters.length; i++) {\\r\\n            if (\\r\\n                // !allVoters[_voters[i]][_proposalId].hasVoted &&\\r\\n                allVoters[_voters[i]][_proposalId].proposalId == _proposalId &&\\r\\n                allVoters[_voters[i]][_proposalId].burn == false\\r\\n            ) {\\r\\n                burn(_voters[i], proposals[_proposalId].voteRight);\\r\\n                allVoters[_voters[i]][_proposalId].burn = true;\\r\\n                emit mintAndburn(\\r\\n                    \\\"burn\\\",\\r\\n                    _voters[i],\\r\\n                    proposals[_proposalId].voteRight\\r\\n                );\\r\\n                allVoters[_voters[i]][_proposalId].voteNum = 0; // Added\\r\\n            } else continue;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function winCountLen(uint256 _proposalId) external view returns (uint256) {\\r\\n        return proposals[_proposalId].winnerCount;\\r\\n    }\\r\\n\\r\\n    // function resultOfProposalId(uint _proposalId) external returns(bool){\\r\\n    //     require(validProposals[_proposalId],\\\"not a valid proposal\\\");\\r\\n    //     proposals[_proposalId].proposalresult();\\r\\n    //     uint winnerCounts = proposals[_proposalId].winnerCount;\\r\\n    //     for(uint i =1; i<=winnerCounts;i++)\\r\\n    //     {\\r\\n    //         results[_proposalId][i] = proposals[_proposalId].result[i];\\r\\n    //     }\\r\\n    //     return true;\\r\\n    // }\\r\\n\\r\\n    function resultOfProposalbyId(uint256 _proposalId)\\r\\n        external\\r\\n        returns (string[] memory)\\r\\n    {\\r\\n        require(validProposals[_proposalId], \\\"not a valid proposal\\\");\\r\\n        proposals[_proposalId].proposalresult();\\r\\n        uint256 _winnerCounts = proposals[_proposalId].winnerCount;\\r\\n        string[] memory _result = new string[](_winnerCounts);\\r\\n        for (uint256 i = 1; i <= _winnerCounts; i++) {\\r\\n            _result[i - 1] = proposals[_proposalId].result[i];\\r\\n        }\\r\\n        return _result;\\r\\n    }\\r\\n\\r\\n    function resultOf(uint256 _proposalId) external returns (string memory) {\\r\\n        require(validProposals[_proposalId], \\\"not a valid proposal\\\");\\r\\n        proposals[_proposalId].proposalresult();\\r\\n        return proposals[_proposalId].result[1];\\r\\n    }\\r\\n\\r\\n    function optionById(uint256 _proposalId)\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory)\\r\\n    {\\r\\n        require(validProposals[_proposalId], \\\"not a valid proposal\\\");\\r\\n        uint16 _numOfOptions = proposals[_proposalId].numOfOptions;\\r\\n        string[] memory _option = new string[](_numOfOptions);\\r\\n        for (uint16 i = 0; i < _numOfOptions; i++) {\\r\\n            _option[i] = proposals[_proposalId].optionHash[i + 1];\\r\\n        }\\r\\n        return _option;\\r\\n    }\\r\\n\\r\\n    function votersById(uint256 _proposalId)\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory)\\r\\n    {\\r\\n        require(validProposals[_proposalId], \\\"not a valid proposal\\\");\\r\\n        uint16 _numOfOptions = proposals[_proposalId].numOfOptions;\\r\\n        string[] memory _option = new string[](_numOfOptions);\\r\\n        for (uint16 i = 0; i < _numOfOptions; i++) {\\r\\n            _option[i] = proposals[_proposalId].optionHash[i + 1];\\r\\n        }\\r\\n        return _option;\\r\\n    }\\r\\n\\r\\n    function votesArrayById(uint256 _proposalId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        require(validProposals[_proposalId], \\\"not a valid proposal\\\");\\r\\n        uint16 _numOfOptions = proposals[_proposalId].numOfOptions;\\r\\n        uint256[] memory _vote = new uint256[](_numOfOptions);\\r\\n        for (uint16 i = 0; i < _numOfOptions; i++) {\\r\\n            _vote[i] = proposals[_proposalId].votes[\\r\\n                proposals[_proposalId].optionHash[i + 1]\\r\\n            ];\\r\\n        }\\r\\n        return _vote;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1d18d4817ed0a509374e619da397bc82495ced7aa9ef827386b440b7718e9c8c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80635c230eee116100ad5780639d671564116100715780639d67156414610398578063ab150226146103c9578063ab9c70d4146103e7578063c08cc02d1461041b578063e745d68e146104395761012c565b80635c230eee146102ce57806370a08231146102ea57806371bfabca1461031a5780638cf49f1b1461034a57806395d89b411461037a5761012c565b8063219d42d5116100f4578063219d42d514610204578063313ce5671461023457806339647bbf146102525780634de77e4814610282578063537488ac1461029e5761012c565b8063013cf08b1461013157806303af665c1461016857806306fdde031461019857806311de04bd146101b657806318160ddd146101e6575b600080fd5b61014b60048036038101906101469190613499565b61046a565b60405161015f989796959493929190613ddd565b60405180910390f35b610182600480360381019061017d9190613555565b610575565b60405161018f9190613ea6565b60405180910390f35b6101a0610990565b6040516101ad9190613ec1565b60405180910390f35b6101d060048036038101906101cb9190613499565b610a22565b6040516101dd9190613e84565b60405180910390f35b6101ee610c07565b6040516101fb9190614204565b60405180910390f35b61021e60048036038101906102199190613499565b610c11565b60405161022b9190613e62565b60405180910390f35b61023c610e51565b6040516102499190614328565b60405180910390f35b61026c60048036038101906102679190613499565b610e5a565b6040516102799190613e62565b60405180910390f35b61029c600480360381019061029791906135a9565b61109a565b005b6102b860048036038101906102b39190613499565b61145c565b6040516102c59190614204565b60405180910390f35b6102e860048036038101906102e391906134c2565b61147c565b005b61030460048036038101906102ff9190613434565b61191e565b6040516103119190614204565b60405180910390f35b610334600480360381019061032f9190613499565b611966565b6040516103419190613ec1565b60405180910390f35b610364600480360381019061035f9190613499565b611a9c565b6040516103719190613e62565b60405180910390f35b610382611cd9565b60405161038f9190613ec1565b60405180910390f35b6103b260048036038101906103ad9190613499565b611d6b565b6040516103c09291906142f8565b60405180910390f35b6103d1611ee6565b6040516103de9190613ea6565b60405180910390f35b61040160048036038101906103fc919061345d565b611f4f565b60405161041295949392919061421f565b60405180910390f35b610423611fcc565b6040516104309190614204565b60405180910390f35b610453600480360381019061044e9190613434565b611fd6565b6040516104619291906141db565b60405180910390f35b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010180546104c6906147e8565b80601f01602080910402602001604051908101604052809291908181526020018280546104f2906147e8565b801561053f5780601f106105145761010080835404028352916020019161053f565b820191906000526020600020905b81548152906001019060200180831161052257829003601f168201915b5050505050908060020154908060030154908060040160009054906101000a900461ffff16908060050154908060070154905088565b60006103e8600760008581526020019081526020016000206003015461059b9190614668565b42116105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390613f43565b60405180910390fd5b60005b8251811015610985578360086000858481518110610626577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206000015414801561072e575060001515600860008584815181106106c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060030160009054906101000a900460ff161515145b1561096c5761079383828151811061076f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516007600087815260200190815260200160002060050154612032565b6001600860008584815181106107d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060030160006101000a81548160ff0219169083151502179055507fabf5327be9f5825c40d58bda541dd07f09b62df3376bbd5ecdbaa8bd82a9d492838281518110610899577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160076000878152602001908152602001600020600501546040516108c692919061415f565b60405180910390a160006008600085848151811061090d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060020181905550610971565b610972565b5b808061097d906148af565b9150506105df565b506001905092915050565b60606002805461099f906147e8565b80601f01602080910402602001604051908101604052809291908181526020018280546109cb906147e8565b8015610a185780601f106109ed57610100808354040283529160200191610a18565b820191906000526020600020905b8154815290600101906020018083116109fb57829003601f168201915b5050505050905090565b60606009600083815260200190815260200160002060009054906101000a900460ff16610a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7b90613f83565b60405180910390fd5b60006007600084815260200190815260200160002060040160009054906101000a900461ffff16905060008161ffff1667ffffffffffffffff811115610af3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610b215781602001602082028036833780820191505090505b50905060005b8261ffff168161ffff161015610bfc5760076000868152602001908152602001600020600b01600760008781526020019081526020016000206009016000600184610b7291906145da565b61ffff168152602001908152602001600020604051610b919190613dc6565b908152602001604051809103902054828261ffff1681518110610bdd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610bf490614884565b915050610b27565b508092505050919050565b6000600154905090565b60606009600083815260200190815260200160002060009054906101000a900460ff16610c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6a90613f83565b60405180910390fd5b60006007600084815260200190815260200160002060040160009054906101000a900461ffff16905060008161ffff1667ffffffffffffffff811115610ce2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610d1557816020015b6060815260200190600190039081610d005790505b50905060005b8261ffff168161ffff161015610e4657600760008681526020019081526020016000206009016000600183610d5091906145da565b61ffff1681526020019081526020016000208054610d6d906147e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d99906147e8565b8015610de65780601f10610dbb57610100808354040283529160200191610de6565b820191906000526020600020905b815481529060010190602001808311610dc957829003601f168201915b5050505050828261ffff1681518110610e28577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508080610e3e90614884565b915050610d1b565b508092505050919050565b60006012905090565b60606009600083815260200190815260200160002060009054906101000a900460ff16610ebc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb390613f83565b60405180910390fd5b60006007600084815260200190815260200160002060040160009054906101000a900461ffff16905060008161ffff1667ffffffffffffffff811115610f2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610f5e57816020015b6060815260200190600190039081610f495790505b50905060005b8261ffff168161ffff16101561108f57600760008681526020019081526020016000206009016000600183610f9991906145da565b61ffff1681526020019081526020016000208054610fb6906147e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe2906147e8565b801561102f5780601f106110045761010080835404028352916020019161102f565b820191906000526020600020905b81548152906001019060200180831161101257829003601f168201915b5050505050828261ffff1681518110611071577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250808061108790614884565b915050610f64565b508092505050919050565b8542106110dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d390613fe3565b60405180910390fd5b84421061111e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111590613f03565b60405180910390fd5b848610611160576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611157906140a3565b60405180910390fd5b60056000815480929190611173906148af565b91905055506111af898989898989878a8a6007600060055481526020019081526020016000206120a3909998979695949392919063ffffffff16565b507f239a8a71a7d1cb0d134f6cc072ad6390e36a88c8e78dff69013ee79528441e80600554898989898989896040516111ef989796959493929190614272565b60405180910390a1600160096000600554815260200190815260200160002060006101000a81548160ff02191690831515021790555060005b88518110156113f55761127b89828151811061126d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183612351565b6113686005548a83815181106112ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600085600860008f8881518110611302577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060055481526020019081526020016000206123c290949392919063ffffffff16565b507fabf5327be9f5825c40d58bda541dd07f09b62df3376bbd5ecdbaa8bd82a9d4928982815181106113c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151836040516113da929190614103565b60405180910390a180806113ed906148af565b915050611228565b506114506005546006600061140861245f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061246790919063ffffffff16565b50505050505050505050565b600060076000838152602001908152602001600020600701549050919050565b6009600085815260200190815260200160002060009054906101000a900460ff166114dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d390614023565b60405180910390fd5b83600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206000015414611571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156890613fa3565b60405180910390fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060010160149054906101000a900460ff1615611612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160990613f63565b60405180910390fd5b81516007600086815260200190815260200160002060040160009054906101000a900461ffff1661ffff161461167d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611674906140e3565b60405180910390fd5b6000805b8251811015611736578281815181106116c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151838281518110611704577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516117169190614699565b826117219190614612565b9150808061172e906148af565b915050611681565b5080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206002015410156117cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c490614043565b60405180910390fd5b6117f6848484600760008a8152602001908152602001600020612538909392919063ffffffff16565b5061185185846006600061180861245f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206128319092919063ffffffff16565b506118aa600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206129e4565b506001600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010160146101000a81548160ff0219169083151502179055505050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606009600083815260200190815260200160002060009054906101000a900460ff166119c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bf90613f83565b60405180910390fd5b6119e360076000848152602001908152602001600020612a92565b5060076000838152602001908152602001600020600a016000600181526020019081526020016000208054611a17906147e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611a43906147e8565b8015611a905780601f10611a6557610100808354040283529160200191611a90565b820191906000526020600020905b815481529060010190602001808311611a7357829003601f168201915b50505050509050919050565b60606009600083815260200190815260200160002060009054906101000a900460ff16611afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af590613f83565b60405180910390fd5b611b1960076000848152602001908152602001600020612a92565b5060006007600084815260200190815260200160002060070154905060008167ffffffffffffffff811115611b77577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611baa57816020015b6060815260200190600190039081611b955790505b5090506000600190505b828111611cce5760076000868152602001908152602001600020600a0160008281526020019081526020016000208054611bed906147e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611c19906147e8565b8015611c665780601f10611c3b57610100808354040283529160200191611c66565b820191906000526020600020905b815481529060010190602001808311611c4957829003601f168201915b505050505082600183611c7991906146f3565b81518110611cb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508080611cc6906148af565b915050611bb4565b508092505050919050565b606060038054611ce8906147e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611d14906147e8565b8015611d615780601f10611d3657610100808354040283529160200191611d61565b820191906000526020600020905b815481529060010190602001808311611d4457829003601f168201915b5050505050905090565b600060606009600084815260200190815260200160002060009054906101000a900460ff16611dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc690613f83565b60405180910390fd5b60076000848152602001908152602001600020600b0160076000858152602001908152602001600020600a01600060018152602001908152602001600020604051611e1a9190613dc6565b90815260200160405180910390205460076000858152602001908152602001600020600a01600060018152602001908152602001600020808054611e5d906147e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611e89906147e8565b8015611ed65780601f10611eab57610100808354040283529160200191611ed6565b820191906000526020600020905b815481529060010190602001808311611eb957829003601f168201915b5050505050905091509150915091565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611f475760019050611f4c565b600090505b90565b6008602052816000526040600020602052806000526040600020600091509150508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020154908060030160009054906101000a900460ff16905085565b6000600554905090565b60066020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b61203a61245f565b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461209457600080fd5b61209e8383612d2d565b505050565b6000878b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550898b60000160146101000a81548160ff021916908360ff160217905550848b600101908051906020019061211d929190612fda565b50868b60020181905550858b60030181905550828290508b60040160006101000a81548161ffff021916908361ffff160217905550838b6005018190555060005b8383905081101561227a5760018c6008018585848181106121a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906121ba9190614343565b6040516121c8929190613d96565b908152602001604051809103902060006101000a81548160ff021916908315150217905550838382818110612226577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906122389190614343565b8d600901600060018561224b9190614612565b81526020019081526020016000209190612266929190613060565b508080612272906148af565b91505061215e565b5060005b89518110156123345760018c60060160008c84815181106122c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061232c906148af565b91505061227e565b5060038b60070181905550600190509a9950505050505050505050565b61235961245f565b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146123b357600080fd5b6123bd8383612ebf565b505050565b6000848660000181905550838660010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828660010160146101000a81548160ff02191690831515021790555081866002018190555060008660030160006101000a81548160ff0219169083151502179055506001905095945050505050565b600033905090565b600082600001600081819054906101000a90046fffffffffffffffffffffffffffffffff16809291906124999061484b565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050818360010160008560000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b600060028560000160149054906101000a900460ff1660ff1614612591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258890613ee3565b60405180910390fd5b84600201544211156125d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125cf90613fc3565b60405180910390fd5b84600301544211156125ed5760009050612829565b8460060160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661267b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267290614003565b60405180910390fd5b60005b8560040160009054906101000a900461ffff1661ffff168161ffff1610156128235785600801848261ffff16815181106126e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040516126f69190613daf565b908152602001604051809103902060009054906101000a900460ff16612751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274890614083565b60405180910390fd5b828161ffff168151811061278e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015186600b01858361ffff16815181106127d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040516127ec9190613daf565b908152602001604051809103902060008282546128099190614612565b92505081905550808061281b90614884565b91505061267e565b50600190505b949350505050565b600083600001601081819054906101000a90046fffffffffffffffffffffffffffffffff16809291906128639061484b565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050828460020160008660000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060005b82518161ffff1610156129aa57828161ffff1681518110612945577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151856003016000868152602001908152602001600020600060018461297191906145da565b61ffff1681526020019081526020016000209080519060200190612996929190612fda565b5080806129a290614884565b9150506128fb565b50600184600401600085815260200190815260200160002060006101000a81548160ff021916908315150217905550600190509392505050565b60008082600001541415612a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a249061413f565b60405180910390fd5b8160010160149054906101000a900460ff1615612a7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a769061419b565b60405180910390fd5b6000826002018190555060019050919050565b600081600301544211612ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad190614063565b60405180910390fd5b60038260000160146101000a81548160ff021916908360ff160217905550600082600b0183600901600060018152602001908152602001600020604051612b219190613dc6565b90815260200160405180910390205490506000600190508360090160006001815260200190815260200160002084600a01600060018152602001908152602001600020908054612b70906147e8565b612b7b9291906130e6565b506000600290505b8460040160009054906101000a900461ffff1661ffff168161ffff1611612d18578285600b018660090160008461ffff168152602001908152602001600020604051612bcf9190613dc6565b9081526020016040518091039020541115612c6f5784600b018560090160008361ffff168152602001908152602001600020604051612c0e9190613dc6565b9081526020016040518091039020549250600191508460090160008261ffff16815260200190815260200160002085600a01600060018152602001908152602001600020908054612c5e906147e8565b612c699291906130e6565b50612d05565b8285600b018660090160008461ffff168152602001908152602001600020604051612c9a9190613dc6565b9081526020016040518091039020541415612d04578180612cba906148af565b9250508460090160008261ffff16815260200190815260200160002085600a016000848152602001908152602001600020908054612cf7906147e8565b612d029291906130e6565b505b5b8080612d1090614884565b915050612b83565b50808460070181905550600192505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d94906140c3565b60405180910390fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e1a90613f23565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160016000828254612e7a91906146f3565b925050819055507fabf5327be9f5825c40d58bda541dd07f09b62df3376bbd5ecdbaa8bd82a9d4928383604051612eb292919061415f565b60405180910390a1505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612f2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f26906141bb565b60405180910390fd5b8060016000828254612f419190614612565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f969190614612565b925050819055507fabf5327be9f5825c40d58bda541dd07f09b62df3376bbd5ecdbaa8bd82a9d4928282604051612fce929190614103565b60405180910390a15050565b828054612fe6906147e8565b90600052602060002090601f016020900481019282613008576000855561304f565b82601f1061302157805160ff191683800117855561304f565b8280016001018555821561304f579182015b8281111561304e578251825591602001919060010190613033565b5b50905061305c9190613173565b5090565b82805461306c906147e8565b90600052602060002090601f01602090048101928261308e57600085556130d5565b82601f106130a757803560ff19168380011785556130d5565b828001600101855582156130d5579182015b828111156130d45782358255916020019190600101906130b9565b5b5090506130e29190613173565b5090565b8280546130f2906147e8565b90600052602060002090601f0160209004810192826131145760008555613162565b82601f106131255780548555613162565b8280016001018555821561316257600052602060002091601f016020900482015b82811115613161578254825591600101919060010190613146565b5b50905061316f9190613173565b5090565b5b8082111561318c576000816000905550600101613174565b5090565b60006131a361319e846143bf565b61439a565b905080838252602082019050828560208602820111156131c257600080fd5b60005b858110156131f257816131d88882613303565b8452602084019350602083019250506001810190506131c5565b5050509392505050565b600061320f61320a846143eb565b61439a565b9050808382526020820190508260005b8581101561324f578135850161323588826133e0565b84526020840193506020830192505060018101905061321f565b5050509392505050565b600061326c61326784614417565b61439a565b9050808382526020820190508285602086028201111561328b57600080fd5b60005b858110156132bb57816132a1888261340a565b84526020840193506020830192505060018101905061328e565b5050509392505050565b60006132d86132d384614443565b61439a565b9050828152602081018484840111156132f057600080fd5b6132fb8482856147a6565b509392505050565b60008135905061331281614e7b565b92915050565b600082601f83011261332957600080fd5b8135613339848260208601613190565b91505092915050565b60008083601f84011261335457600080fd5b8235905067ffffffffffffffff81111561336d57600080fd5b60208301915083602082028301111561338557600080fd5b9250929050565b600082601f83011261339d57600080fd5b81356133ad8482602086016131fc565b91505092915050565b600082601f8301126133c757600080fd5b81356133d7848260208601613259565b91505092915050565b600082601f8301126133f157600080fd5b81356134018482602086016132c5565b91505092915050565b60008135905061341981614e92565b92915050565b60008135905061342e81614ea9565b92915050565b60006020828403121561344657600080fd5b600061345484828501613303565b91505092915050565b6000806040838503121561347057600080fd5b600061347e85828601613303565b925050602061348f8582860161340a565b9150509250929050565b6000602082840312156134ab57600080fd5b60006134b98482850161340a565b91505092915050565b600080600080608085870312156134d857600080fd5b60006134e68782880161340a565b94505060206134f787828801613303565b935050604085013567ffffffffffffffff81111561351457600080fd5b6135208782880161338c565b925050606085013567ffffffffffffffff81111561353d57600080fd5b613549878288016133b6565b91505092959194509250565b6000806040838503121561356857600080fd5b60006135768582860161340a565b925050602083013567ffffffffffffffff81111561359357600080fd5b61359f85828601613318565b9150509250929050565b60008060008060008060008060006101008a8c0312156135c857600080fd5b60006135d68c828d0161341f565b99505060208a013567ffffffffffffffff8111156135f357600080fd5b6135ff8c828d01613318565b98505060406136108c828d01613303565b97505060606136218c828d0161340a565b96505060806136328c828d0161340a565b95505060a08a013567ffffffffffffffff81111561364f57600080fd5b61365b8c828d016133e0565b94505060c08a013567ffffffffffffffff81111561367857600080fd5b6136848c828d01613342565b935093505060e06136978c828d0161340a565b9150509295985092959850929598565b60006136b38383613701565b60208301905092915050565b60006136cc8484846138d5565b90509392505050565b60006136e18383613927565b905092915050565b60006136f58383613d69565b60208301905092915050565b61370a81614727565b82525050565b61371981614727565b82525050565b600061372a826144c3565b6137348185614523565b935061373f83614474565b8060005b8381101561377057815161375788826136a7565b9750613762836144ef565b925050600181019050613743565b5085935050505092915050565b60006137898385614534565b93508360208402850161379b84614484565b8060005b878110156137e15784840389526137b68284614583565b6137c18682846136bf565b95506137cc846144fc565b935060208b019a50505060018101905061379f565b50829750879450505050509392505050565b60006137fe826144ce565b6138088185614534565b93508360208202850161381a8561448e565b8060005b85811015613856578484038952815161383785826136d5565b945061384283614509565b925060208a0199505060018101905061381e565b50829750879550505050505092915050565b6000613873826144d9565b61387d8185614545565b93506138888361449e565b8060005b838110156138b95781516138a088826136e9565b97506138ab83614516565b92505060018101905061388c565b5085935050505092915050565b6138cf81614739565b82525050565b60006138e18385614556565b93506138ee8385846147a6565b6138f7836149b4565b840190509392505050565b600061390e8385614578565b935061391b8385846147a6565b82840190509392505050565b6000613932826144e4565b61393c8185614556565b935061394c8185602086016147b5565b613955816149b4565b840191505092915050565b600061396b826144e4565b6139758185614567565b93506139858185602086016147b5565b61398e816149b4565b840191505092915050565b60006139a4826144e4565b6139ae8185614578565b93506139be8185602086016147b5565b80840191505092915050565b600081546139d7816147e8565b6139e18186614578565b945060018216600081146139fc5760018114613a0d57613a40565b60ff19831686528186019350613a40565b613a16856144ae565b60005b83811015613a3857815481890152600182019150602081019050613a19565b838801955050505b50505092915050565b6000613a56601283614567565b9150613a61826149c5565b602082019050919050565b6000613a79602c83614567565b9150613a84826149ee565b604082019050919050565b6000613a9c602283614567565b9150613aa782614a3d565b604082019050919050565b6000613abf601d83614567565b9150613aca82614a8c565b602082019050919050565b6000613ae2600d83614567565b9150613aed82614ab5565b602082019050919050565b6000613b05601483614567565b9150613b1082614ade565b602082019050919050565b6000613b28602383614567565b9150613b3382614b07565b604082019050919050565b6000613b4b601883614567565b9150613b5682614b56565b602082019050919050565b6000613b6e601483614567565b9150613b7982614b7f565b602082019050919050565b6000613b91602383614567565b9150613b9c82614ba8565b604082019050919050565b6000613bb4601283614567565b9150613bbf82614bf7565b602082019050919050565b6000613bd7602383614567565b9150613be282614c20565b604082019050919050565b6000613bfa601a83614567565b9150613c0582614c6f565b602082019050919050565b6000613c1d601c83614567565b9150613c2882614c98565b602082019050919050565b6000613c40602a83614567565b9150613c4b82614cc1565b604082019050919050565b6000613c63602183614567565b9150613c6e82614d10565b604082019050919050565b6000613c86602483614567565b9150613c9182614d5f565b604082019050919050565b6000613ca9600483614567565b9150613cb482614dae565b602082019050919050565b6000613ccc601d83614567565b9150613cd782614dd7565b602082019050919050565b6000613cef600483614567565b9150613cfa82614e00565b602082019050919050565b6000613d12600983614567565b9150613d1d82614e29565b602082019050919050565b6000613d35601f83614567565b9150613d4082614e52565b602082019050919050565b613d5481614745565b82525050565b613d6381614761565b82525050565b613d728161478f565b82525050565b613d818161478f565b82525050565b613d9081614799565b82525050565b6000613da3828486613902565b91508190509392505050565b6000613dbb8284613999565b915081905092915050565b6000613dd282846139ca565b915081905092915050565b600061010082019050613df3600083018b613710565b613e00602083018a613d87565b8181036040830152613e128189613960565b9050613e216060830188613d78565b613e2e6080830187613d78565b613e3b60a0830186613d5a565b613e4860c0830185613d78565b613e5560e0830184613d78565b9998505050505050505050565b60006020820190508181036000830152613e7c81846137f3565b905092915050565b60006020820190508181036000830152613e9e8184613868565b905092915050565b6000602082019050613ebb60008301846138c6565b92915050565b60006020820190508181036000830152613edb8184613960565b905092915050565b60006020820190508181036000830152613efc81613a49565b9050919050565b60006020820190508181036000830152613f1c81613a6c565b9050919050565b60006020820190508181036000830152613f3c81613a8f565b9050919050565b60006020820190508181036000830152613f5c81613ab2565b9050919050565b60006020820190508181036000830152613f7c81613ad5565b9050919050565b60006020820190508181036000830152613f9c81613af8565b9050919050565b60006020820190508181036000830152613fbc81613b1b565b9050919050565b60006020820190508181036000830152613fdc81613b3e565b9050919050565b60006020820190508181036000830152613ffc81613b61565b9050919050565b6000602082019050818103600083015261401c81613b84565b9050919050565b6000602082019050818103600083015261403c81613ba7565b9050919050565b6000602082019050818103600083015261405c81613bca565b9050919050565b6000602082019050818103600083015261407c81613bed565b9050919050565b6000602082019050818103600083015261409c81613c10565b9050919050565b600060208201905081810360008301526140bc81613c33565b9050919050565b600060208201905081810360008301526140dc81613c56565b9050919050565b600060208201905081810360008301526140fc81613c79565b9050919050565b6000606082019050818103600083015261411c81613c9c565b905061412b6020830185613710565b6141386040830184613d78565b9392505050565b6000602082019050818103600083015261415881613cbf565b9050919050565b6000606082019050818103600083015261417881613ce2565b90506141876020830185613710565b6141946040830184613d78565b9392505050565b600060208201905081810360008301526141b481613d05565b9050919050565b600060208201905081810360008301526141d481613d28565b9050919050565b60006040820190506141f06000830185613d4b565b6141fd6020830184613d4b565b9392505050565b60006020820190506142196000830184613d78565b92915050565b600060a0820190506142346000830188613d78565b6142416020830187613710565b61424e60408301866138c6565b61425b6060830185613d78565b61426860808301846138c6565b9695505050505050565b600060e082019050614287600083018b613d78565b8181036020830152614299818a61371f565b90506142a86040830189613710565b6142b56060830188613d78565b6142c26080830187613d78565b81810360a08301526142d48186613960565b905081810360c08301526142e981848661377d565b90509998505050505050505050565b600060408201905061430d6000830185613d78565b818103602083015261431f8184613960565b90509392505050565b600060208201905061433d6000830184613d87565b92915050565b6000808335600160200384360303811261435c57600080fd5b80840192508235915067ffffffffffffffff82111561437a57600080fd5b60208301925060018202360383131561439257600080fd5b509250929050565b60006143a46143b5565b90506143b0828261481a565b919050565b6000604051905090565b600067ffffffffffffffff8211156143da576143d9614985565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561440657614405614985565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561443257614431614985565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561445e5761445d614985565b5b614467826149b4565b9050602081019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000808335600160200384360303811261459c57600080fd5b83810192508235915060208301925067ffffffffffffffff8211156145c057600080fd5b6001820236038413156145d257600080fd5b509250929050565b60006145e582614761565b91506145f083614761565b92508261ffff03821115614607576146066148f8565b5b828201905092915050565b600061461d8261478f565b91506146288361478f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561465d5761465c6148f8565b5b828201905092915050565b60006146738261478f565b915061467e8361478f565b92508261468e5761468d614927565b5b828204905092915050565b60006146a48261478f565b91506146af8361478f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146e8576146e76148f8565b5b828202905092915050565b60006146fe8261478f565b91506147098361478f565b92508282101561471c5761471b6148f8565b5b828203905092915050565b60006147328261476f565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156147d35780820151818401526020810190506147b8565b838111156147e2576000848401525b50505050565b6000600282049050600182168061480057607f821691505b6020821081141561481457614813614956565b5b50919050565b614823826149b4565b810181811067ffffffffffffffff8211171561484257614841614985565b5b80604052505050565b600061485682614745565b91506fffffffffffffffffffffffffffffffff821415614879576148786148f8565b5b600182019050919050565b600061488f82614761565b915061ffff8214156148a4576148a36148f8565b5b600182019050919050565b60006148ba8261478f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156148ed576148ec6148f8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f50726f706f73616c3a20696e6163746976650000000000000000000000000000600082015250565b7f456e642074696d652073686f756c642062652067726561746572207468616e2060008201527f63757272656e742074696d650000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f70726f706f73616c206973206e6f7420636f6d706c6574656420796574000000600082015250565b7f616c726561647920766f74656400000000000000000000000000000000000000600082015250565b7f6e6f7420612076616c69642070726f706f73616c000000000000000000000000600082015250565b7f6e6f7420612076616c696420766f74657220666f7220746869732070726f706f60008201527f73616c0000000000000000000000000000000000000000000000000000000000602082015250565b7f70726f706f73616c206e6f742073746172746564207965740000000000000000600082015250565b7f70726f706f73616c206e6f742073746172746564000000000000000000000000600082015250565b7f4e6f7420612076616c696420766f74657220666f7220746869732070726f706f60008201527f73616c0000000000000000000000000000000000000000000000000000000000602082015250565b7f696e76616c69642070726f706f73616c49640000000000000000000000000000600082015250565b7f6e6f742073756666696369656e742062616c616e636520746f2063617374207660008201527f6f74650000000000000000000000000000000000000000000000000000000000602082015250565b7f50726f706f73616c206861736e277420656e6465642079657421000000000000600082015250565b7f50726f706f73616c3a20696e76616c6964206f7074696f6e4861736800000000600082015250565b7f456e642074696d652073686f756c642062652067726561746572207468616e2060008201527f73746172742074696d6500000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f6e6f7420612076616c6964206c656e677468206f66206861736820726573706f60008201527f6e73652100000000000000000000000000000000000000000000000000000000602082015250565b7f6d696e7400000000000000000000000000000000000000000000000000000000600082015250565b7f496e76616c696420766f74657220666f722070726f706f73616c496421000000600082015250565b7f6275726e00000000000000000000000000000000000000000000000000000000600082015250565b7f6e6f7420766f7465640000000000000000000000000000000000000000000000600082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b614e8481614727565b8114614e8f57600080fd5b50565b614e9b8161478f565b8114614ea657600080fd5b50565b614eb281614799565b8114614ebd57600080fd5b5056fea2646970667358221220785b7627668cb863413411980e9c1b12227b5b0bcf0b5504c1bf45644fb4474364736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 678,
        "contract": "contracts/Qvoting.sol:Qvoting",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 680,
        "contract": "contracts/Qvoting.sol:Qvoting",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 682,
        "contract": "contracts/Qvoting.sol:Qvoting",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 684,
        "contract": "contracts/Qvoting.sol:Qvoting",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 898,
        "contract": "contracts/Qvoting.sol:Qvoting",
        "label": "owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1003,
        "contract": "contracts/Qvoting.sol:Qvoting",
        "label": "proposalId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1008,
        "contract": "contracts/Qvoting.sol:Qvoting",
        "label": "userProposal",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(UserProposal)452_storage)"
      },
      {
        "astId": 1013,
        "contract": "contracts/Qvoting.sol:Qvoting",
        "label": "proposals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(proposal)68_storage)"
      },
      {
        "astId": 1020,
        "contract": "contracts/Qvoting.sol:Qvoting",
        "label": "allVoters",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(voter)558_storage))"
      },
      {
        "astId": 1024,
        "contract": "contracts/Qvoting.sol:Qvoting",
        "label": "validProposals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(voter)558_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct voterLibrary.voter))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(voter)558_storage)"
      },
      "t_mapping(t_address,t_struct(UserProposal)452_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserProposalLibrary.UserProposal)",
        "numberOfBytes": "32",
        "value": "t_struct(UserProposal)452_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint128,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_string_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(proposal)68_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct proposalLibrary.proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(proposal)68_storage"
      },
      "t_mapping(t_uint256,t_struct(voter)558_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct voterLibrary.voter)",
        "numberOfBytes": "32",
        "value": "t_struct(voter)558_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UserProposal)452_storage": {
        "encoding": "inplace",
        "label": "struct UserProposalLibrary.UserProposal",
        "members": [
          {
            "astId": 431,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "proposalCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 433,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "responseCount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 437,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "proposalCreated",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint128,t_uint256)"
          },
          {
            "astId": 441,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "proposalResponsed",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint128,t_uint256)"
          },
          {
            "astId": 447,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "proposalAnswer",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))"
          },
          {
            "astId": 451,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "responsedProposal",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_bool)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(proposal)68_storage": {
        "encoding": "inplace",
        "label": "struct proposalLibrary.proposal",
        "members": [
          {
            "astId": 33,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 35,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 37,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "disc",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 39,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 41,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "expirationTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 43,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "numOfOptions",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 45,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "voteRight",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 49,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "voters",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 51,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "winnerCount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 55,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "option",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_string_memory_ptr,t_bool)"
          },
          {
            "astId": 59,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "optionHash",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 63,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "result",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 67,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "votes",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_string_memory_ptr,t_uint256)"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(voter)558_storage": {
        "encoding": "inplace",
        "label": "struct voterLibrary.voter",
        "members": [
          {
            "astId": 549,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "proposalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 551,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "voterAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 553,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "hasVoted",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 555,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "voteNum",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 557,
            "contract": "contracts/Qvoting.sol:Qvoting",
            "label": "burn",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}